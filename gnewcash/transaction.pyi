# Stubs for gnewcash.transaction (Python 3)
#
# NOTE: This dynamically typed stub was automatically generated by stubgen.

from datetime import datetime
from decimal import Decimal
from gnewcash.account import Account
from gnewcash.guid_object import GuidObject
from gnewcash.slot import SlottableObject
from typing import Any, Iterator, Optional, Tuple

class Transaction(GuidObject, SlottableObject):
    currency: Any = ...
    date_posted: Any = ...
    date_entered: Any = ...
    description: str = ...
    splits: Any = ...
    memo: Any = ...
    def __init__(self) -> None: ...
    def __lt__(self, other: Transaction) -> bool: ...
    def __eq__(self, other: object) -> bool: ...
    @property
    def cleared(self) -> bool: ...
    def mark_transaction_cleared(self) -> None: ...
    @property
    def notes(self) -> str: ...
    @notes.setter
    def notes(self, value: str) -> None: ...
    @property
    def reversed_by(self) -> str: ...
    @reversed_by.setter
    def reversed_by(self, value: str) -> None: ...
    @property
    def voided(self) -> str: ...
    @voided.setter
    def voided(self, value: str) -> None: ...
    @property
    def void_time(self) -> str: ...
    @void_time.setter
    def void_time(self, value: str) -> None: ...
    @property
    def void_reason(self) -> str: ...
    @void_reason.setter
    def void_reason(self, value: str) -> None: ...
    @property
    def associated_uri(self) -> str: ...
    @associated_uri.setter
    def associated_uri(self, value: str) -> None: ...

class Split(GuidObject):
    reconciled_state: Any = ...
    amount: Any = ...
    account: Any = ...
    action: Any = ...
    memo: Any = ...
    quantity_denominator: str = ...
    reconcile_date: Any = ...
    quantity_num: Any = ...
    lot_guid: Any = ...
    value_num: Any = ...
    value_denom: Any = ...
    def __init__(self, account: Optional[Account], amount: Optional[Decimal], reconciled_state: str=...) -> Any: ...

class TransactionManager:
    transactions: Any = ...
    disable_sort: bool = ...
    deleted_transaction_guids: Any = ...
    def __init__(self) -> None: ...
    def add(self, new_transaction: Transaction) -> None: ...
    def delete(self, transaction: Transaction) -> None: ...
    def get_transactions(self, account: Optional[Account]=...) -> Iterator[Transaction]: ...
    def get_account_starting_balance(self, account: Account) -> Decimal: ...
    def get_account_ending_balance(self, account: Account) -> Decimal: ...
    def minimum_balance_past_date(self, account: Account, date: datetime) -> Tuple[Optional[Decimal], Optional[datetime]]: ...
    def get_balance_at_date(self, account: Account, date: Optional[datetime]=...) -> Decimal: ...
    def __getitem__(self, item: int) -> Transaction: ...
    def __len__(self) -> int: ...
    def __eq__(self, other: object) -> bool: ...
    def __iter__(self) -> Iterator[Transaction]: ...

class ScheduledTransaction(GuidObject):
    name: Any = ...
    enabled: bool = ...
    auto_create: bool = ...
    auto_create_notify: bool = ...
    advance_create_days: int = ...
    advance_remind_days: int = ...
    instance_count: int = ...
    start_date: Any = ...
    last_date: Any = ...
    end_date: Any = ...
    template_account: Any = ...
    recurrence_multiplier: int = ...
    recurrence_period: Any = ...
    recurrence_start: Any = ...
    num_occur: Any = ...
    rem_occur: Any = ...
    recurrence_weekend_adjust: Any = ...
    def __init__(self) -> None: ...

class SimpleTransaction(Transaction):
    from_split: Any = ...
    to_split: Any = ...
    splits: Any = ...
    def __init__(self) -> None: ...
    @property
    def from_account(self) -> Optional[Account]: ...
    @from_account.setter
    def from_account(self, value: Account) -> None: ...
    @property
    def to_account(self) -> Optional[Account]: ...
    @to_account.setter
    def to_account(self, value: Account) -> None: ...
    @property
    def amount(self) -> Optional[Decimal]: ...
    @amount.setter
    def amount(self, value: Decimal) -> None: ...
