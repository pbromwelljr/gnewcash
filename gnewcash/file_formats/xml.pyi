# Stubs for gnewcash.file_formats.xml (Python 3)
#
# NOTE: This dynamically typed stub was automatically generated by stubgen.

import pathlib
from datetime import datetime
from gnewcash.account import Account
from gnewcash.commodity import Commodity
from gnewcash.file_formats.base import BaseFileFormat, BaseFileReader, BaseFileWriter
from gnewcash.gnucash_file import Book, Budget, GnuCashFile
from gnewcash.slot import Slot
from gnewcash.transaction import ScheduledTransaction, Split, Transaction
from typing import Any, Dict, List, Optional
from xml.etree import ElementTree

XML_NAMESPACES: Dict[str, str]

class GnuCashXMLReader(BaseFileReader):
    LOGGER: Any = ...
    @classmethod
    def load(cls: Any, *args: Any, source_file: str=..., sort_transactions: bool=..., **kwargs: Any) -> GnuCashFile: ...
    @classmethod
    def get_xml_root(cls: Any, source_path: pathlib.Path) -> ElementTree.Element: ...
    @classmethod
    def create_book_from_xml(cls: Any, book_node: ElementTree.Element, sort_transactions: bool=...) -> Book: ...
    @classmethod
    def create_slot_from_xml(cls: Any, slot_node: ElementTree.Element) -> Slot: ...
    @classmethod
    def create_commodity_from_xml(cls: Any, commodity_node: ElementTree.Element) -> Commodity: ...
    @classmethod
    def create_account_from_xml(cls: Any, account_node: ElementTree.Element, account_objects: List[Account]) -> Account: ...
    @classmethod
    def create_transaction_from_xml(cls: Any, transaction_node: ElementTree.Element, account_objects: List[Account]) -> Transaction: ...
    @classmethod
    def create_split_from_xml(cls: Any, split_node: ElementTree.Element, account_objects: List[Account]) -> Split: ...
    @classmethod
    def create_scheduled_transaction_from_xml(cls: Any, xml_obj: ElementTree.Element, template_account_root: Optional[Account]) -> ScheduledTransaction: ...
    @classmethod
    def create_budget_from_xml(cls: Any, budget_node: ElementTree.Element) -> Budget: ...
    @classmethod
    def read_xml_child_text(cls: Any, xml_object: ElementTree.Element, tag_name: str, namespaces: Dict[str, str]) -> Optional[str]: ...
    @classmethod
    def read_xml_child_boolean(cls: Any, xml_object: ElementTree.Element, tag_name: str, namespaces: Dict[str, str]) -> Optional[bool]: ...
    @classmethod
    def read_xml_child_int(cls: Any, xml_object: ElementTree.Element, tag_name: str, namespaces: Dict[str, str]) -> Optional[int]: ...
    @classmethod
    def read_xml_child_date(cls: Any, xml_object: ElementTree.Element, tag_name: str, namespaces: Dict[str, str]) -> Optional[datetime]: ...

class GnuCashXMLWriter(BaseFileWriter):
    LOGGER: Any = ...
    @classmethod
    def dump(cls: Any, gnucash_file: GnuCashFile, *args: Any, target_file: str=..., prettify_xml: bool=..., **kwargs: Any) -> None: ...
    @classmethod
    def cast_book_as_xml(cls: Any, book: Book) -> ElementTree.Element: ...
    @classmethod
    def cast_account_as_xml(cls: Any, account: Account) -> List[ElementTree.Element]: ...
    @classmethod
    def cast_slot_as_xml(cls: Any, slot: Slot) -> ElementTree.Element: ...
    @classmethod
    def cast_commodity_as_xml(cls: Any, commodity: Commodity) -> ElementTree.Element: ...
    @classmethod
    def cast_commodity_as_short_xml(cls: Any, commodity: Commodity, node_tag: str) -> ElementTree.Element: ...
    @classmethod
    def cast_transaction_as_xml(cls: Any, transaction: Transaction) -> ElementTree.Element: ...
    @classmethod
    def cast_split_as_xml(cls: Any, split: Split) -> ElementTree.Element: ...
    @classmethod
    def cast_scheduled_transaction_as_xml(cls: Any, scheduled_transaction: ScheduledTransaction) -> ElementTree.Element: ...
    @classmethod
    def cast_budget_as_xml(cls: Any, budget: Budget) -> ElementTree.Element: ...
    @classmethod
    def write_file_contents(cls: Any, target_file: str, file_contents: bytes) -> None: ...

class XMLFileFormat(GnuCashXMLReader, GnuCashXMLWriter, BaseFileFormat): ...

class GZipXMLFileFormat(XMLFileFormat):
    @classmethod
    def get_xml_root(cls: Any, source_path: pathlib.Path) -> ElementTree.Element: ...
    @classmethod
    def write_file_contents(cls: Any, target_file: str, file_contents: bytes) -> None: ...
