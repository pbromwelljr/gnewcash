# Stubs for gnewcash.file_formats.sqlite (Python 3)
#
# NOTE: This dynamically typed stub was automatically generated by stubgen.

import enum
import sqlite3
from gnewcash.account import Account
from gnewcash.commodity import Commodity
from gnewcash.file_formats.base import BaseFileFormat, BaseFileReader, BaseFileWriter
from gnewcash.gnucash_file import Book, Budget, GnuCashFile
from gnewcash.slot import Slot
from gnewcash.transaction import ScheduledTransaction, Split, Transaction
from sqlite3 import Cursor
from typing import Any, Dict, List, Optional, Tuple

SQLITE_SLOT_TYPE_MAPPING: Any

class DBAction(enum.Enum):
    INSERT: int = ...
    UPDATE: int = ...
    @staticmethod
    def get_db_action(sqlite_cursor: Cursor, table_name: str, column_name: str, row_identifier: Any) -> DBAction: ...

class GnuCashSQLiteReader(BaseFileReader):
    LOGGER: Any = ...
    @classmethod
    def load(cls: Any, *args: Any, source_file: str=..., sort_transactions: bool=..., **kwargs: Any) -> GnuCashFile: ...
    @classmethod
    def create_books_from_sqlite(cls: Any, sqlite_cursor: Cursor, sort_transactions: bool) -> List[Book]: ...
    @classmethod
    def create_account_from_sqlite(cls: Any, sqlite_cursor: Cursor, account_id: str) -> Account: ...
    @classmethod
    def create_slots_from_sqlite(cls: Any, sqlite_cursor: Cursor, object_id: str) -> List[Slot]: ...
    @classmethod
    def create_commodity_from_sqlite(cls: Any, sqlite_cursor: Cursor, commodity_guid: str) -> Commodity: ...
    @classmethod
    def create_commodities_from_sqlite(cls: Any, sqlite_cursor: Cursor) -> List[Commodity]: ...
    @classmethod
    def create_transactions_from_sqlite(cls: Any, sqlite_cursor: Cursor, root_account: Account, template_root_account: Account) -> List[Transaction]: ...
    @classmethod
    def create_scheduled_transactions_from_sqlite(cls: Any, sqlite_cursor: Cursor, template_root_account: Account) -> List[ScheduledTransaction]: ...
    @classmethod
    def create_budget_from_sqlite(cls: Any, sqlite_cursor: sqlite3.Cursor) -> List[Budget]: ...
    @classmethod
    def create_splits_from_sqlite(cls: Any, sqlite_cursor: Cursor, transaction_guid: str, root_account: Account, template_root_account: Account) -> List[Split]: ...
    @classmethod
    def get_sqlite_table_data(cls: Any, sqlite_cursor: Cursor, table_name: str, where_condition: Optional[str]=..., where_parameters: Optional[Tuple[Any]]=...) -> List[Dict[str, Any]]: ...

class GnuCashSQLiteWriter(BaseFileWriter):
    @classmethod
    def dump(cls: Any, gnucash_file: GnuCashFile, *args: Any, target_file: str=..., **kwargs: Any) -> None: ...
    @classmethod
    def write_book_to_sqlite(cls: Any, book: Book, sqlite_cursor: sqlite3.Cursor) -> None: ...
    @classmethod
    def write_budget_to_sqlite(cls: Any, budget: Budget, sqlite_cursor: sqlite3.Cursor) -> None: ...
    @classmethod
    def write_recurrence_to_sqlite(cls: Any, obj: Budget, sqlite_cursor: Cursor) -> None: ...
    @classmethod
    def write_commodity_to_sqlite(cls: Any, commodity: Commodity, sqlite_cursor: Cursor) -> None: ...
    @classmethod
    def write_slot_to_sqlite(cls: Any, slot: Slot, sqlite_cursor: Cursor, object_guid: str) -> None: ...
    @classmethod
    def write_account_to_sqlite(cls: Any, account: Account, sqlite_cursor: Cursor) -> None: ...
    @classmethod
    def write_transaction_to_sqlite(cls: Any, transaction: Transaction, sqlite_cursor: Cursor) -> None: ...
    @classmethod
    def delete_transaction_from_sqlite(cls: Any, deleted_transaction_guid: str, sqlite_cursor: Cursor) -> None: ...
    @classmethod
    def write_split_to_sqlite(cls: Any, split: Split, sqlite_cursor: Cursor, transaction_guid: str) -> None: ...
    @classmethod
    def write_scheduled_transaction_to_sqlite(cls: Any, scheduled_transaction: ScheduledTransaction, sqlite_cursor: Cursor) -> None: ...
    @classmethod
    def create_sqlite_schema(cls: Any, sqlite_cursor: sqlite3.Cursor) -> None: ...

class SqliteFileFormat(GnuCashSQLiteReader, GnuCashSQLiteWriter, BaseFileFormat): ...
