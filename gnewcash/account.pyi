import abc
from _typeshed import Incomplete
from datetime import datetime
from decimal import Decimal
from gnewcash.commodity import Commodity as Commodity
from gnewcash.enums import AccountType as AccountType
from gnewcash.guid_object import GuidObject as GuidObject
from gnewcash.slot import SlottableObject as SlottableObject
from typing import Dict, List, NamedTuple, Optional, Tuple, Union

class LoanStatus(NamedTuple):
    iterator_balance: Incomplete
    iterator_date: Incomplete
    interest: Incomplete
    amount_to_capital: Incomplete

class LoanExtraPayment(NamedTuple):
    payment_date: Incomplete
    payment_amount: Incomplete

class Account(GuidObject, SlottableObject):
    name: str
    type: Incomplete
    commodity_scu: Incomplete
    children: Incomplete
    commodity: Incomplete
    code: Incomplete
    description: Incomplete
    non_std_scu: Incomplete
    def __init__(self) -> None: ...
    def __eq__(self, other: object) -> bool: ...
    def __hash__(self) -> int: ...
    def as_dict(self, account_hierarchy: Dict[str, 'Account'] = ..., path_to_self: str = ...) -> Dict[str, 'Account']: ...
    @property
    def dict_entry_name(self) -> str: ...
    def get_parent_commodity(self) -> Optional[Commodity]: ...
    def get_subaccount_by_id(self, subaccount_id: str) -> Optional['Account']: ...
    @property
    def parent(self) -> Optional['Account']: ...
    @property
    def color(self) -> str: ...
    @property
    def notes(self) -> str: ...
    @property
    def hidden(self) -> bool: ...
    @property
    def placeholder(self) -> bool: ...
    def get_account_guids(self, account_guids: Optional[List[str]] = ...) -> List[str]: ...

class BankAccount(Account):
    type: Incomplete
    def __init__(self) -> None: ...

class IncomeAccount(Account):
    type: Incomplete
    def __init__(self) -> None: ...

class AssetAccount(Account):
    type: Incomplete
    def __init__(self) -> None: ...

class CreditAccount(Account):
    type: Incomplete
    def __init__(self) -> None: ...

class ExpenseAccount(Account):
    type: Incomplete
    def __init__(self) -> None: ...

class EquityAccount(Account):
    type: Incomplete
    def __init__(self) -> None: ...

class LiabilityAccount(Account):
    type: Incomplete
    def __init__(self) -> None: ...

class InterestAccountBase(abc.ABC, metaclass=abc.ABCMeta):
    @property
    @abc.abstractmethod
    def starting_date(self) -> datetime: ...
    @property
    @abc.abstractmethod
    def interest_percentage(self) -> Decimal: ...
    @property
    @abc.abstractmethod
    def payment_amount(self) -> Decimal: ...
    @property
    @abc.abstractmethod
    def starting_balance(self) -> Decimal: ...
    @abc.abstractmethod
    def get_info_at_date(self, date: datetime) -> LoanStatus: ...
    @abc.abstractmethod
    def get_all_payments(self, skip_additional_payments: bool = ...) -> List[Tuple[datetime, Decimal, Decimal]]: ...

class InterestAccount(InterestAccountBase):
    additional_payments: Incomplete
    skip_payment_dates: Incomplete
    interest_start_date: Incomplete
    def __init__(self, starting_balance: Decimal, starting_date: datetime, interest_percentage: Decimal, payment_amount: Decimal, additional_payments: Optional[List[LoanExtraPayment]] = ..., skip_payment_dates: Optional[List[datetime]] = ..., interest_start_date: Optional[datetime] = ...) -> None: ...
    @property
    def starting_date(self) -> datetime: ...
    @property
    def interest_percentage(self) -> Decimal: ...
    @property
    def payment_amount(self) -> Decimal: ...
    @property
    def starting_balance(self) -> Decimal: ...
    def get_info_at_date(self, date: datetime) -> LoanStatus: ...
    def get_all_payments(self, skip_additional_payments: bool = ...) -> List[Tuple[datetime, Decimal, Decimal]]: ...

class InterestAccountWithSubaccounts(InterestAccountBase):
    additional_payments: Incomplete
    skip_payment_dates: Incomplete
    subaccounts: Incomplete
    def __init__(self, subaccounts: List[InterestAccount], additional_payments: Optional[List[Dict[str, Union[Decimal, datetime]]]] = ..., skip_payment_dates: Optional[List[datetime]] = ...) -> None: ...
    @property
    def starting_date(self) -> datetime: ...
    @property
    def interest_percentage(self) -> Decimal: ...
    @property
    def payment_amount(self) -> Decimal: ...
    @property
    def starting_balance(self) -> Decimal: ...
    def get_info_at_date(self, date: datetime) -> LoanStatus: ...
    def get_all_payments(self, skip_additional_payments: bool = ...) -> List[Tuple[datetime, Decimal, Decimal]]: ...
